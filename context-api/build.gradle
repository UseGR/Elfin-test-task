import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.openapi.generator'
}

group = 'ru.scoring.context-api'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.cloud:spring-cloud-starter-openfeign',
            'org.mapstruct:mapstruct:1.6.2',
            'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    [
            'org.springdoc:springdoc-openapi-ui:1.8.0',
            'io.swagger.core.v3:swagger-annotations:2.2.23'
    ].each { dep ->
        implementation(dep) {
            exclude group: 'commons-logging'
        }
    }

    [
            'org.projectlombok:lombok',
            'org.mapstruct:mapstruct-processor:1.6.2'
    ].each {
        compileOnly it
        testCompileOnly it
        annotationProcessor it
        testAnnotationProcessor it
    }

    testImplementation 'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.cloud:spring-cloud-starter-contract-stub-runner:4.1.4',
            'org.testcontainers:testcontainers:1.20.2',
            "org.testcontainers:elasticsearch:1.20.2",
            'org.testcontainers:junit-jupiter:1.20.2',
            'io.rest-assured:rest-assured:5.5.0',
            'io.rest-assured:spring-web-test-client:5.5.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('bootJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourceSets.main.java.srcDirs += "$buildDir/openapi/generated"

tasks.register('generate context-api controller 1.0.0', GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$projectDir/oas/context-api/1.0.0/api.yaml")
    outputDir.set("$buildDir/openapi/generated")
    ignoreFileOverride.set("$projectDir/.openapi-generator-ignore")
    configOptions.set([
            library                            : "spring-boot",
            invokerPackage                     : "ru.scoring.api_specifications.context_api_controller._1_0_0.server",
            apiPackage                         : "ru.scoring.api_specifications.context_api_controller._1_0_0.server.api",
            modelPackage                       : "ru.scoring.api_specifications.context_api_controller._1_0_0.server.model",
            configPackage                      : "ru.scoring.api_specifications.context_api_controller._1_0_0.server.configuration",
            basePackage                        : "ru.scoring.api_specifications.context_api_controller._1_0_0.server",
            useOptional                        : "true",
            openApiNullable                    : "false",
            generateModelTests                 : "true",
            generateApiTests                   : "true",
            interfaceOnly                      : "false",
            useSpringBoot3                     : "true",
            sourceFolder                       : "",
            testOutput                         : "$rootDir/src/java",
            generateBuilders                   : "true",
            generateConstructorWithAllArgs     : "true",
            generateConstructorWithRequiredArgs: "true",
            useTags                            : "true"
    ])
}

tasks.register('generate all') {
    dependsOn(
            'generate context-api controller 1.0.0'
    )
}

compileJava {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedSourcePolicy=WARN',
    ]
}

compileJava.dependsOn 'generate all'
